---
import Layout from '../layouts/Layout.astro';
import PageTitle from '../components/PageTitle.astro';
import Searchbar from '../components/Searchbar.astro';
import Dropdown from '../components/Dropdown.astro';
import Map from '../components/Map.astro';
import Table from '../components/Table.astro';
import TableScript from '../components/TableScript.astro';
import LoadingCircle from '../components/LoadingCircle.astro';
import ErrorMessage from '../components/ErrorMessage.astro';
import AddMonitor from '../components/AddMonitor.astro';
---

<Layout title="SPV">
	<TableScript/>
	<PageTitle title="SPV" description="View statistics about the SPV nodes"/>
	<div class="top">
		<ErrorMessage/>
		<LoadingCircle/>
	</div>
	<div id="box" class="box hide">
		<Dropdown title="Node Map" id="node-map">
			<Map/>
		</Dropdown>
		<p class="total gradient-text">Total nodes: <span id="total"></span></p>
		<Dropdown title="Country Table" id="country-dropdown">
			<Table id="country-table"/>
		</Dropdown>
		<Dropdown title="Node Table" id="node-dropdown">
			<Table id="node-table"/>
		</Dropdown>
	</div>

    <AddMonitor name="SPV" placeholder="myspvserver.com:50001"/>

	<script is:inline>
		(async ()=>{
			let resp;
			const loading = document.querySelector('#loading');
			loading.classList.add('loading');

			// Fetch from API
			try {
				const req = await fetch('/api/spv-nodes', {
					method: "GET",
					headers: {
						"Content-Type": "application/json",
					}
				});

				resp = (await req.json()).result;
			} catch(err) {
				console.log(err);
				loading.classList.remove('loading');
				setError("failed to send request");
				return;
			}

            console.log(resp);

			loading.classList.remove('loading');

			if (resp.error) return setError(resp.error);

			document.querySelector('#box').classList.remove('hide');

			//console.log(resp);

			map(resp.nodes);

			document.querySelector('#total').innerText = resp.nodes.length;

			setupCountryTable(resp.nodes);
			setupNodeTable(resp.nodes);
		})()

		function setupCountryTable(nodes) {
			const countries = {};

			nodes.forEach(node=>{
				if (!countries[node.geo.country]) countries[node.geo.country] = {"Country": node.geo.country, "#": 0};
				countries[node.geo.country]['#'] += 1;
			});

			
			Object.keys(countries).forEach(c=>{
				countries[c]['%'] = Math.floor((countries[c]['#'] / nodes.length) * 10000) / 100;
			});

			setupTable("country-table", Object.values(countries), "%");
		}

		function setupNodeTable(nodes) {
			setupTable("node-table", nodes.map(node=>{
				return {"Hostname": `${node.hostname}:${node.port}`, "Country": node.geo.country, "ISP": node.geo.organization, "Status": node.online ? "online": "offline", "Details": node.details || ""}
			}), "Country");
		}
	</script>
</Layout>
<style>
	.top {
		display: flex;
		flex-direction: column;
		gap: 25px;
	}

	.box {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 25px;
		margin-bottom: 25px;
	}

	.box .total {
		font-weight: bold;
		font-size: 2rem;
	}
</style>