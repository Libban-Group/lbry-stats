<script>
    // Get the query from URL
    const query = new URL(window.location.href).searchParams.get('q');

    // Get data for the query
    async function getData(query) {
        const resp = await fetch('/api/blob-peers', {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                query
            })
        });

        // Get JSON response
        const json = await resp.json();

        // Set up claim details
        const title = document.getElementById('title-detail');
        title.innerText = json.title;
        const channel = document.getElementById('channel-detail');
        channel.innerText = json.channel;
        const claim_name = document.getElementById('claim-name-detail');
        claim_name.innerText = json.claim_name
        const claim_id = document.getElementById('claim-id-detail');
        claim_id.innerText = json.claim_id;
        const thumbnail = document.getElementById('thumbnail-detail');
        thumbnail.src = json.thumbnail;
        const link = document.getElementById('link-detail');
        link.href = `https://lbry.pigg.es/?q=${json.channel ? json.channel + '/' : ''}${json.claim_name + ':' + json.claim_id}`;


        const details = document.getElementById('details');
        details.classList.toggle('loading');

        // Create country list which will contain all peers sorted by country
        let county_list = {};

        // Go through each peer and sort it by country
        for (let i in json.peers) {
            const peer = json.peers[i];
            if (!peer.geo) continue;

            // To lower case and replace spaced with '-' so it matches the classes in the svg
            const country = peer.geo.country.toLowerCase().replaceAll(' ', '_');

            // If the country are not yet in the list, create an empty list for it
            if (!county_list[country]) county_list[country] = [];

            // Push the peer to the country list
            county_list[country].push(peer);
        }

        // Add elements to table
        const tbody = document.getElementById('tbody');
        for (const i in json.peers) {
            const peer = json.peers[i];

            const row = document.createElement('tr');
            const address = document.createElement('td');
            address.innerText = peer.address || '-';
            const country = document.createElement('td');
            country.innerText = peer.geo.country || '-';
            const isp = document.createElement('td');
            isp.innerText = peer.geo.organization || '-';
            const details = document.createElement('td');
            details.innerText = peer.geo.details || '-';

            row.appendChild(address);
            row.appendChild(country);
            row.appendChild(isp);
            row.appendChild(details);

            tbody.appendChild(row);
        }

        // Remove loading class from node list
        const node_list = document.getElementById('node-list-wrapper');
        node_list.classList.toggle('loading');


        // Create new style element
        const cssStyle = document.createElement('style');

        // Add color to all the countries with a peer in it
        for (const i in county_list) {
            const country = document.getElementsByClassName(i);
            const setting = document.createTextNode(`.${i},.${i}:hover{fill: rgb(255, 165, 0);}`);
            cssStyle.appendChild(setting);
        }

        // Append the styling element to the head element
        document.getElementsByTagName("head")[0].appendChild(cssStyle);

        // Remove loading class from the map
        const map = document.getElementById('map');
        map.classList.toggle('loading');

        console.log(county_list);
    }

    
    getData(query);
</script>